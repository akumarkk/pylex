#lang racket

(require parser-tools/lex)
(require (prefix-in : parser-tools/lex-sre))
(define output-endmarker? (error "implement me!"))
(define (for-all pred? list) (error "implement me!"))
(define (unget port) (error "implement me!"))
(define-lex-abbrev NEWLINE (error "implement me!"))
(define current-spaces (error "implement me!"))
(define (reset-spaces!) (error "implement me!"))
(define (inc-spaces!) (error "implement me!"))
(define (inc-tab!) (error "implement me!"))
(define indent-stack (error "implement me!"))
(define (current-indent) (error "implement me!"))
(define (push-indent! spaces) (error "implement me!"))
(define (pop-indent!) (error "implement me!"))
(define (measure-spaces!) (error "implement me!"))
(define (pop-indents!) (error "implement me!"))
(define paren-stack (error "implement me!"))
(define (push-paren! char) (error "implement me!"))
(define (pop-paren! char) (error "implement me!"))
(define (whitespace-ignored?) (error "implement me!"))
(define-lex-abbrev hash-comment (error "implement me!"))
(define-lex-abbrev keyword (error "implement me!"))
(define-lex-abbrev operator (or "+" "-"  "*"  "**"      "/"       "//"      "%"))
(define-lex-abbrev delimiter (error "implement me!"))
(define-lex-abbrev nonzerodigit (error "implement me!"))
(define-lex-abbrev digit (error "implement me!"))
(define-lex-abbrev octdigit (error "implement me!"))
(define (octal-digit? char) (error "implement me!"))
(define-lex-abbrev hexdigit (error "implement me!"))
(define (hex-digit? char) (error "implement me!"))
(define-lex-abbrev bindigit (error "implement me!"))
(define-lex-abbrev octinteger (error "implement me!"))
(define-lex-abbrev hexinteger (error "implement me!"))
(define-lex-abbrev bininteger (error "implement me!"))
(define-lex-abbrev decimalinteger (error "implement me!"))
(define-lex-abbrev intpart (error "implement me!"))
(define-lex-abbrev fraction (error "implement me!"))
(define-lex-abbrev pointfloat (error "implement me!"))
(define-lex-abbrev exponent (error "implement me!"))
(define-lex-abbrev exponentfloat (error "implement me!"))
(define-lex-abbrev floatnumber (error "implement me!"))
(define-lex-abbrev imagnumber (error "implement me!"))
(define unicode-name=>integer (error "implement me!"))
(define (char-for-unicode-name name) (error "implement me!"))
(define (char-for string) (error "implement me!"))
(define-lex-abbrev string-quote (error "implement me!"))
(define (unescape-string string #:is-byte (is-byte #f)) (error "implement me!"))
(define (lex-raw-string end-quote port rev-chars) (error "implement me!"))
(define other-id-start-chars (error "implement me!"))
(define other-id-continue-chars (error "implement me!"))
(define (other-id-start? char) (error "implement me!"))
(define (other-id-continue? char) (error "implement me!"))
(define (id-start? char) (error "implement me!"))
(define (id-continue? char) (error "implement me!"))
(define (xid-start? char) (error "implement me!"))
(define (xid-continue? char) (error "implement me!"))
(define (id-lexer port rev-chars) (error "implement me!"))
(define pylex (error "implement me!"))
(define indent-lexer (error "implement me!"))
(define test (error "implement me!"))
(define test-input (error "implement me!"))
(define input (error "implement me!"))
(define (port->list port) (error "implement me!"))
(define (port->string port) (error "implement me!"))
(match (current-command-line-arguments) ((vector "-n") (set! output-endmarker? #f) (set! input (current-input-port))) ((vector (or "--test" "--drracket")) (set! input test-input)) ((vector file-name) (set! input (open-input-file file-name))) ((vector) (set! input (current-input-port))))
(set! input (open-input-string (port->string input)))
(define tokens (error "implement me!"))
(for ((token tokens)) (write token) (newline))
